services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    ports:
      # Porta para acesso externo ao Kafka (do seu host)
      - "9092:9092"
      # Porta para comunicação interna entre containers Docker
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      # Criação automática dos tópicos: NomeDoTopico:Particoes:Replicas
      KAFKA_CREATE_TOPICS: "topic.frame.original:1:1,topic.frame.processado:1:1"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true' # Geralmente 'true' por padrão, mas explícito para clareza
    volumes:
      - kafka_data:/var/lib/kafka/data

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080" # A UI estará acessível em http://localhost:8080
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: 'Local Kafka Cluster'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'kafka:29092' # Conecta-se ao Kafka usando o nome do serviço na rede Docker
      KAFKA_CLUSTERS_0_ZOOKEEPER: 'zookeeper:2181'
      DYNAMIC_CONFIG_ENABLED: 'true' # Permite configurações dinâmicas na UI

volumes:
  zookeeper_data:
    driver: local
  zookeeper_log:
    driver: local
  kafka_data:
    driver: local
